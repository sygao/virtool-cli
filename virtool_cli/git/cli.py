from pathlib import Path
import click
# import structlog

from virtool_cli.git.split import run_split
from virtool_cli.git.clean import run_cleanup


@click.group("git")
def git():
    """
    Commands related to the git functions of reference repositories.
    """
    pass

@git.command()
@click.option(
    "-repo", "--repository_path",
    required=True,
    type=str,
    help="the path to a repository directory",
)
@click.option(
    "-ref",
    "--branch",
    required=True,
    type=str,
    help="the name of a branch",
)
@click.option(
    "-main",
    "--main_branch",
    required=True,
    default="main",
    type=str,
    help="the name of the main branch",
)
@click.option('--debug/--no-debug', default=False)
def split(repository_path, branch, main_branch, debug):
    """Split a single updated branch into separate branches where updates are found vs main."""
    try:
        run_split(
            Path(repository_path), 
            branch, main_branch, 
            debugging=debug)
        
    except (FileNotFoundError, NotADirectoryError) as e:
        click.echo("Not a valid repository directory")
        click.echo(e)

@git.command()
@click.option(
    "-repo", "--repository_path",
    required=True,
    type=str,
    help="the path to a repository directory",
)
@click.option('--debug/--no-debug', default=False)
def clean(repository_path, debug):
    """Delete all autogenerated branches."""
    try:
        run_cleanup(Path(repository_path), debugging=debug)
    except (FileNotFoundError, NotADirectoryError) as e:
        click.echo("Not a valid repository directory")
        click.echo(e)


if __name__ == "__main__":
    git()